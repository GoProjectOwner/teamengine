<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
  <head>
    <title>Tester's Guide</title>
  </head>
  <body>
    <p>This document provides basic guidance about how to develop a test suite 
    that can be executed using TEAM Engine. The test harness is capable of running 
    tests implemented using the OGC CTL (Compliance Test Language) scripting language 
    and the TestNG framework.</p>

    <h2>CTL scripts</h2>
    <p>
    The OGC CTL grammar can be regarded as a kind of XML-based domain-specific language 
    for defining test suites. A test suite is processed to produce XSLT 2.0 templates 
    that are then executed by the Saxon processor. See the OGC specification <a 
    href="http://portal.opengeospatial.org/files/?artifact_id=33085" target="_blank">
    OGC 06-126r2</a> for details about developing test suites using CTL elements.
    </p>
    <p>
    The teamengine-core-${project.version}-base.zip archive contains a sample test 
    suite defined in <code>scripts/note.ctl</code>. The OGC compliance testing program 
    also maintains a set of test scripts that are publicly available from the OGC
    Suversion repository at this location:</p> 

    <p><code>https://svn.opengeospatial.org/ogc-projects/cite/scripts</code></p>

    <h2>TestNG framework</h2>

    <h3>Creating a new test suite</h3>
    <p>The TEAM Engine test harness concentrates on functional or "black box" testing that 
    aims to verify the behavior or structure of a test subject against the relevant 
    specifications. It can execute test suites implemented using <a href="http://testng.org" 
    target="_blank">TestNG</a>, a popular Java-based testing framework that is used to 
    perform testing at multiple levels, from unit to system testing. </p>

    <p>A Maven <a href="http://maven.apache.org/archetype/maven-archetype-plugin/" 
    target="_blank">archetype</a> is available that provides a template for creating new 
    test suites; it quickly generates a rudimentary implementation of an executable test 
    suite (ETS) that can be run immediately. The <a href="https://github.com/opengeospatial/ets-archetype-testng" 
    target="_blank">source code</a> is hosted at GitHub. Project releases are available in 
    the central Maven repository with these coordinates (using the latest version is always 
    recommended):</p>

    <pre>
    groupId: org.opengis.cite
    artifactId: ets-archetype-testng
    version: 2.0</pre>

    <p>To create a new test suite, invoke the interactive 'generate' goal of the archetype 
    plugin and supply the <code>ets-code</code> parameter to specify the identifier for the 
    test suite; this value must be a legal Java package name (for example, 'alpha10' as shown 
    below).</p>

    <pre>
    mvn archetype:generate -Dets-code=alpha10 -DarchetypeGroupId=org.opengis.cite
    </pre>

    <p>Several prompts will collect various property values in order to generate the test 
    suite project. The suggested default values may be modified if desired. The new project 
    is created in a subdirectory named using the value of the artifactId property.</p>
    
    <p>The main class, <code>TestNGController</code>, resides in the root package; it implements 
    the <code>TestSuiteController</code> interface declared in the teamengine-spi module (see 
    Figure 2). The test suite configuration file (testng.xml, also located in the root package 
    under src/main/resources) imposes a high-level structure on a test suite by organizing the 
    test classes into test sets, each of which corresponds to a conformance class. For more 
    information see the following section, <em>Basic anatomy of a test suite</em>.</p>

    <h3>Basic anatomy of a test suite</h3>

    <p>The TestNG framework offers considerable flexibility regarding the overall 
    organization of a test suite. A test run executes one or more test suites, each of 
    which may include a collection of child test suites. A child test suite encapsulates 
    tests for a specific functional area. For example, a so-called "class 2" profile 
    (see ISO 19106) that introduces new capabilities still requires conformance to the 
    base standard(s); there may be a child test suite defined for each applicable base 
    standard. The essential structure of a test suite is illustrated in the following 
    figure.</p>

    <div class="figure">
      <p><strong>Figure 3 - Structure of a TestNG test suite</strong></p>
      <figure>
        <img src="./images/testng-suite.png" alt="Figure 3 - Structure of a TestNG test suite" />
      </figure>
    </div>

    <p>Each &lt;test&gt; element occurring within a top-level &lt;suite&gt; element 
    denotes a set of tests that typically corresponds to a conformance class or level. 
    The set contains one or more test classes that focus on particular capabilities 
    or feature sets (e.g., WFS GetFeature). A test class contains test methods that 
    implement the actual test cases; these methods are annotated with <code>@Test</code>. 
    The listing shown below includes the test suite definition produced when creating 
    a new test suite from the ETS archetype (see src/main/resources/org/opengis/cite/${ets-code}/testng.xml).</p>

    <pre>
&lt;suite name="alpha-1.0-SNAPSHOT" verbose="0" configfailurepolicy="skip"&gt;
  &lt;parameter name="iut"  value=""/&gt;
  &lt;parameter name="ics"  value=""/&gt;

  &lt;listeners&gt;
    &lt;listener class-name="org.opengis.cite.alpha.TestRunListener" /&gt;
    &lt;listener class-name="org.opengis.cite.alpha.SuiteFixtureListener" /&gt;
  &lt;/listeners&gt;

  &lt;test name="Conformance Level 1"&gt;
    &lt;classes&gt;
      &lt;class name="org.opengis.cite.alpha.level1.Capability1Tests" /&gt;
    &lt;/classes&gt;
  &lt;/test&gt;
  &lt;test name="Conformance Level 2"&gt;
    &lt;classes&gt;
      &lt;class name="org.opengis.cite.alpha.level2.Capability2Tests" /&gt;
    &lt;/classes&gt;
  &lt;/test&gt;
&lt;/suite&gt;</pre>

    <p>The order of test execution can be controlled to some extent, although this should 
    rarely be necessary. The structure of the XML suite definition is the most important 
    determinant. Keep the following default behaviors in mind when putting it together:</p>

    <ul>
      <li>Test groups (&lt;test&gt; elements) comprising a suite are executed in 
    document order (as specified in the XML suite definition).</li>
      <li>Within a given test group, constituent test classes are executed in document 
    order.</li>
      <li>A child test suite is run before its parent suite.</li>
      <li>Test methods are run after their dependencies, which are declared using the 
        <code>dependsOnMethods</code> or <code>dependsOnGroups</code> attributes on the 
    @Test annotation. </li>
    </ul>

    <p>See the <a href="http://testng.org/doc/documentation-main.html" target="_blank">TestNG 
    documentation</a> for more information. The books listed below may also be of interest:</p>
    <ul>
      <li><a href="http://books.google.ca/books?id=9CuP8S2glWQC" target="_blank">TestNG Beginner's Guide</a></li>
      <li><a href="http://books.google.ca/books?id=bCvcMcLZwV4C" target="_blank">Next Generation Java Testing: 
      TestNG and Advanced Concepts</a></li>
    </ul>

    <h3>Test suite development</h3>

    <p>
    Projects based on the Maven ETS archetype depend on the <code>teamengine-spi</code> 
    and <code>schema-utils</code> components. These are not currently available in the 
    central Maven repository, but they can be obtained from the <a target="_blank" 
    href="https://svn.opengeospatial.org/ogc-projects/cite/maven/">OGC repository</a>. 
    The project POM contains a repository element (with id = 'opengeospatial-cite') 
    for this alternate source of artifacts. When the test suite is first built these 
    components will be retrieved and put into the local repository.</p>

    <p>Most IDEs have integrated support for working with Maven projects (e.g. Eclipse, 
    NetBeans, IntelliJ), so test developers may use their IDE of choice. Some tips for using 
    Eclipse are provided below.</p>

    <p>The Eclipse plug-ins listed below are strongly recommended; install them from the indicated 
    update sites.</p>
    <ul>
      <li>TestNG: Update from [http://beust.com/eclipse]</li>
      <li>Subclipse (Subversion 1.7 client): Update from [http://subclipse.tigris.org/update_1.8.x]</li>
      <li>m2e (Maven integration): From the main update site for the Eclipse release, select "General 
    Purpose Tools" &gt; m2e</li>
      <li>EGit (Git SCM client): Available from the main update site.</li>
    </ul>

    <p><strong>Note:</strong> Some Eclipse packages (such as Eclipse 4.3 for Java EE Developers) 
    may already include some of these plug-ins by default.</p>

    <p>The main class is <code>TestNGController</code>, located in the root package. The test run 
    arguments are supplied as an XML representation of a Java properties file. Specify the location 
    of this file as the argument in a Java run configuration or put it in your user home directory 
    ($HOME or %USERPROFILE%) and name it "test-run-props.xml". An example is shown in the listing 
    below (see also src/main/config/test-run-props.xml).</p>

    <pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt;
&lt;properties version="1.0"&gt;
  &lt;comment&gt;Sample test run arguments&lt;/comment&gt;
  &lt;entry key="iut"&gt;http://www.w3schools.com/xml/note.xml&lt;/entry&gt;
  &lt;entry key="ics"&gt;level-2&lt;/entry&gt;
&lt;/properties&gt;</pre>

    <p><img src="./images/info-16px.png"/> <strong>Note:</strong> The value of the 'iut' argument 
    in the listing above must be an absolute URI that conforms to the <code>http</code> or 
    <code>file</code> schemes.</p>

    <p>The test results will be written to a subdirectory (named by a UUID value) created in the 
    user home directory specified by the system property "user.home". By default this is the XML 
    report generated by TestNG. In order to activate the full set of default TestNG listeners 
    (which will also produce an HTML report), modify the last line of the <code>TestNGController(String)</code> 
    constructor and change the third argument to 'true'.</p>
    
    <p>As an alternative to invoking the main test controller, it is also possible to create 
    a TestNG run configuration if the <a href="http://testng.org/doc/eclipse.html" target="_blank">
    TestNG Eclipse plugin</a> has been installed. Select Run &gt; Run Configurations... and choose 
    <strong>TestNG</strong>. Create a new launch configuration from a test suite definition file 
    by clicking the "Suite" option and browsing to the <code>testng.xml</code> file located within 
    the src/main/resources directory. Specify a value for all required test suite parameters. Note 
    that any values appearing here are superseded by those given in the properties file when the 
    suite is run using the TestNGController class. When the configuration is run the results are 
    displayed in the TestNG view.</p>

    <p>Each test suite should contain unit tests to verify that all test methods (and supporting 
    utility methods) behave as expected. The <a href="http://junit.org/" target="_blank">JUnit</a> 
    and <a href="http://code.google.com/p/mockito/" target="_blank">Mockito</a> frameworks are 
    used for this purpose. A new test suite generated from the Maven archetype includes several 
    sample unit tests.</p>
    
    <p>A test run requires one or more arguments that supply information about the test subject 
    and how thoroughly it will be tested. The arguments are typically processed by a <code>SuiteFixtureListener</code> 
    at the beginning of the test run; this listener implements the TestNG interface <a target="_blank" 
    href="http://testng.org/javadocs/org/testng/ISuiteListener.html">ISuiteListener</a>. The result 
    of processing an argument will generally be set as a suite-level attribute that can then be 
    accessed by test methods during the test run. For example, a web service description is parsed 
    and the resulting XML document is then set as an attribute of the ISuite instance:</p>

<pre>
ISuite suite; // passed in via ISuiteListener#onStart(ISuite suite) 
Document iutDoc = URIUtils.parseURI(iutRef);
suite.setAttribute(SuiteAttribute.TEST_SUBJECT.getName(), iutDoc);
</pre>
    
    <h3>Utility libraries</h3>
    
    <p>A test suite may require some additional libraries in order to perform more specialized 
    assertion checking. Currently there are a couple of utility libraries available that 
    facilitate schema validation and geospatial data processing; they're available in the 
    OGC Maven repository (see Table 3).</p>

    <table>
      <caption>Table 3 - Utility libraries</caption>
      <thead>
        <tr>
          <th>groupId</th>
          <th>artifactId</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>org.opengis.cite</td>
          <td>schema-utils</td>
          <td>Provides support for validating XML representations using the following 
          schema languages: W3C XML Schema 1.0, Schematron (ISO/IEC 19757-3:2006), and 
          RELAX NG (ISO/IEC 19757-2:2008).</td>
        </tr>
        <tr>
          <td>org.opengis.cite</td>
          <td>geomatics-geotk</td>
          <td>Provides support for processing spatial data and associated metadata using 
          various Geotk modules (see http://www.geotoolkit.org/).</td>
        </tr>
      </tbody>
    </table>

  </body>
</html>
