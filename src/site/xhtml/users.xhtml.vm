<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
  <head>
    <title>User's Guide</title>
  </head>
  <body>
    <p>This document provides some guidance about how to use TEAM Engine to 
    execute a test run and view the results. There are three ways to interact 
    with the test harness: a command shell, the web application, or a REST-like 
    API.</p>

    <h2>Command shell</h2>
    <p>
    The console application (teamengine-console-${project.version}-bin.zip) 
    includes shell scripts for running test suites in Windows and Unix-like (Bash shell) 
    environments. Unpack the archive into a convenient location (TE_HOME); the contents 
    are as shown below.
    </p>
    <pre>
TE_HOME
  |-- bin/              # shell scripts (windows, unix)
  |-- lib/              # supporting libraries
  |-- resources/        # classpath resources (stylesheets, schemas, etc.)
    </pre>

    <p>
    If desired, set the value of the TE_BASE environment variable in the <code>setenv</code> 
    script; otherwise set it for the user evironment according to the particulars of the 
    operating system in use. Once this is done, change to the appropriate script directory 
    (TE_HOME/bin/{unix,windows}) or add it to the system path.
    </p>

    <p><img src="./images/warn-16px.png"/> <strong>Warning:</strong> If a test suite 
    requires any supporting libraries that are not included with the core distribution, 
    these must be added to the TE_BASE/resources/lib directory.</p>

    <p>
    To view a brief summary of a test suite, run the <code>listsuites</code> script and 
    specify the location of the root CTL script (relative to TE_BASE/scripts).
    </p>
    <pre>
&gt; listsuites -source=note.ctl

Suite note:note-test ({http://example.net/note-test}note-test)
Sample test suite
Checks the content of a note.</pre>

    <p>
    To execute a test suite, run the <code>test</code> script and specify the location of the 
    root CTL script (this contains the ctl:suite element); the file reference may be an absolute 
    filesystem location or relative to TE_BASE/scripts. The test results will be written to a 
    subdirectory <em>sNNNN</em> created in TE_BASE/users/<em>username</em>/.
    </p>
    <pre>
&gt; test -source=note.ctl

Testing suite note:note-test in Test Mode with defaultResult of Pass ...
Testing note:main type Mandatory in Test Mode with defaultResult Pass (s0002)
...</pre>

    <h2>Web application</h2>
    <p>
    The web application (teamengine.war) provides a user interface for selecting test suites, 
    browsing test documentation, and launching test runs. The welcome page (e.g. 
    http://localhost:8080/teamengine) displays a table listing all available test suites. 
    In a new installation a sample suite for the fictitious "XML Note" specification 
    should appear. The listed test suites correspond to entries in the main configuration 
    file located at TE_BASE/config.xml.
    </p>

    <p>
    Select "Login" and then supply the appropriate credentials or register to create 
    a new user account. After logging in, previous test sessions are displayed. Select 
    "Create new session" and choose a test suite to execute.
    </p>

    <p>The TE_BASE/config.xml file is a "watched" resource--the web application will be 
    reloaded whenever this file is modified. This means that test suites can be added or 
    updated and become available for use without having to restart the Tomcat instance.
    Simply put the CTL scripts in TE_BASE/scripts and insert or update an entry in the 
    main configuration file. Supporting libraries, if any, must be placed in the 
    WEB-INF/lib directory.</p>

    <p>As a convenience, the <code>ets-resources</code> project may be checked out from 
    the OGC Subversion repository. Run 'mvn package' to generate an archive containing 
    all supporting libraries for the latest OGC test suites. Available releases may be 
    obtained from GitHub:</p>

    <pre>https://github.com/opengeospatial/ets-resources</pre>

    <p>The contents of the resulting archive are described below.</p>
    <dl>
      <dt><code>config.xml</code></dt>
      <dd>TEAMengine configuration file that includes all released OGC test suites; put this 
      in TE_BASE/config.xml</dd>
      <dt><code>config-approved.xml</code></dt>
      <dd>TEAMengine configuration file that includes all OGC test suites approved for production 
      use; put this in TE_BASE/config.xml</dd>
      <dt><code>ctl-scripts-release.csv</code></dt>
      <dd>CSV file for exporting CTL test scripts (using the <code>export-ctl</code> shell 
      script in TE_HOME/bin)</dd>
      <dt><code>lib/*.jar</code></dt>
      <dd>Supporting libraries; put these in WEB-INF/lib (web app) or TE_BASE/resources/lib 
      (CLI app)</dd>
      <dt><code>bin/</code></dt>
      <dd>A directory containing shell scripts for Windows- and UNIX-based hosts:
        <ul>
          <li>setup-tebase: Sets up a TEAM-engine instance (TE_BASE) with the test 
          suites listed in a CSV file.</li>
        </ul>
      </dd>
    </dl>

    <h2>REST API</h2>
    <p>
    A simple REST-like API (based on <a href="http://jcp.org/en/jsr/detail?id=311" target="_blank">
    JAX-RS 1.1</a>) enables programmatic execution of some test suites; currently only
    TestNG-based suites can be run in this manner. It exposes the endpoints listed in Table 2. 
    In the request URIs the <code>{etsCode}</code> and <code>{etsVersion}</code> variables 
    denote the test suite code and version, respectively, for a particular test suite.
    </p>

    <table>
      <caption>Table 2 - REST endpoints</caption>
      <thead>
        <tr>
          <th>URI (relative to base)</th>
          <th>Resource</th>
          <th>Representation</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>/rest/suites</td>
          <td>Test suite collection</td>
          <td>application/xhtml+xml </td>
        </tr>
        <tr>
          <td>/rest/suites/{etsCode}/{etsVersion}</td>
          <td>Test suite documentation</td>
          <td>text/html</td>
        </tr>
        <tr>
          <td>/rest/suites/{etsCode}/{etsVersion}/run</td>
          <td>Test run controller</td>
          <td>application/xml </td>
        </tr>
      </tbody>
    </table>

    <p><img src="./images/warn-16px.png"/> <strong>Warning:</strong> When using the REST API, 
    if any test run argument includes a URI value that contains an ampersand ('&amp;') character 
    in a query component, it must be percent-encoded as %26 since it is a "data octet" in 
    this context (see <a href="http://tools.ietf.org/html/rfc3986#section-2.1" target="_blank">
    RFC 3986, sec. 2.1</a>).</p>

    <p>The test run parameters are described in the test suite summary document. This 
    document can be viewed from the web application by selecting the <em>Test Suite 
    Revision</em> link displayed on the home page; the REST API will also present the 
    document at the <code>/rest/suites/{etsCode}/{etsVersion}</code> endpoint. Each 
    parameter is either mandatory, conditional (required under certain circumstances), 
    or optional.</p>

    <p>There are three steps involved in deploying an executable test suite (ETS) implemented 
    using the TestNG framework. The first two steps are not required in order to use the REST API.</p>
    <ol>
      <li>Unpack the *-ctl-scripts.zip archive into the TE_BASE/scripts directory; it 
      includes test suite documentation and a simple CTL script that invokes the main 
      controller.</li>
      <li>Update the TE_BASE/config.xml file: Add or revise the &lt;standard&gt; element 
      for the test suite.</li>
      <li>Put the ETS component (a binary JAR file) and any dependencies into 
        the <code>WEB-INF/lib</code> directory of the web application.</li>
    </ol>

    <p>The <code>*-deps</code> archive assembles the ETS and its dependencies into a single 
    bundle that is unpacked into the lib directory in step 2 above. In some cases it may be 
    necessary to add other (transitive) dependencies. Note that the Tomcat instance does 
      <strong>not</strong> need to be restarted to enable the test suite.</p>

  </body>
</html>
